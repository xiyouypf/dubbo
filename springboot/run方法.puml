
@startuml
'https://plantuml.com/sequence-diagram

autonumber

participant SpringApplication as SpringApplication
participant ConfigurableEnvironment as Environment
participant ConversionService as ConversionService
participant AnnotationConfigApplicationContext as Context
participant SimpleApplicationEventMulticaster as initialMulticaster
participant DefaultListableBeanFactory as BeanFactory

note right of SpringApplication
run方法
end note
SpringApplication -> SpringApplication: 启动计时器stopWatch
SpringApplication -> SpringApplication: 设置系统属性"java.awt.headless"
SpringApplication -> SpringApplication: 注册SpringApplicationRunListener（SpringApplication中）监听
SpringApplication -> initialMulticaster: 发布ApplicationStartingEvent事件(SpringApplicationRunListener监听) -->starting
SpringApplication -> SpringApplication: 封装命令行参数ApplicationArguments对象

alt 准备环境对象
SpringApplication -> Environment: 创建StandardServletEnvironment对象(根据webApplicationType对象判断)
alt 配置环境对象
Environment -> ConversionService: 创建并设置conversionService转换服务
ConversionService -> ConversionService: 1添加默认Converter，2添加默认Formatter
SpringApplication -> Environment: 配置环境对象的propertySources
SpringApplication -> Environment: 配置环境对象的Profiles（属性：spring.profiles.active）
end
SpringApplication -> Environment: 为MutablePropertySources更新ConfigurationPropertySourcesPropertySource对象
SpringApplication -> initialMulticaster: 发布ApplicationEnvironmentPreparedEvent事件（SpringApplicationRunListener类型对象监听）-->prepared
SpringApplication -> Environment: 将Environment对象绑定到SpringApplication
SpringApplication -> SpringApplication: 如果是自定义环境对象，判断如果需要转换则转换
SpringApplication -> Environment: 为MutablePropertySources更新ConfigurationPropertySourcesPropertySource对象
end
SpringApplication -> Environment: 设置spring.beaninfo.ignore属性，保证某些Bean不会添加到准备的环境中
SpringApplication -> SpringApplication: 打印Banner
SpringApplication -> Context: 创建上下文对象context
alt 准备上下文Context对象
Context -> Context: 设置环境对象
alt 后置处理ApplicationContext
    SpringApplication -> BeanFactory: 注册beanNameGenerator到一级缓存中
    SpringApplication -> Context: 设置资源加载器
    SpringApplication -> Context: 设置类加载器
    SpringApplication -> BeanFactory: 设置转换服务
end
SpringApplication -> SpringApplication: 执行所有初始化器进行初始化
SpringApplication -> initialMulticaster: 发布ApplicationContextInitializedEvent事件（SpringApplicationRunListener类型对象监听）-->contextPrepared
SpringApplication -> SpringApplication: Bean定义信息加载器加载Bean定义信息
SpringApplication -> initialMulticaster: 发布ApplicationPreparedEvent事件（SpringApplicationRunListener类型对象监听）-->contextLoaded
end
SpringApplication -> Context: 刷新上下文（走Spring逻辑）
SpringApplication -> SpringApplication: afterRefresh扩展点
SpringApplication -> SpringApplication: 停止计时器stopWatch
SpringApplication -> SpringApplication: 打印Spring启动耗时信息
SpringApplication -> initialMulticaster: 发布ApplicationStartedEvent事件（SpringApplicationRunListener监听）-->Started
SpringApplication -> SpringApplication: 执行Runner集合对象（ApplicationRunner、CommandLineRunner），callRunners
SpringApplication -> initialMulticaster: 发布ApplicationReadyEvent事件（SpringApplicationRunListener监听）-->running
@enduml